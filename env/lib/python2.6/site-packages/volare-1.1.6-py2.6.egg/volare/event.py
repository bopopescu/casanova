#-*- coding:utf-8 -*-

import uuid
from datetime import datetime

from lxml import etree

class Event(object):

    def assert_not_null(self, value, field):
        if not value:
            raise ValueError(u"O campo %s do evento é obrigatório" % field)

    def __init__(self, service, user, machine, resource_type, 
                 operation, uri, organization, message_properties=None):

        self.assert_not_null(service, "service")
        self.service = service
        self.assert_not_null(user, "user")
        self.user = user
        self.assert_not_null(machine, "machine")
        self.machine = machine
        self.assert_not_null(resource_type, "resource_type")
        self.resource_type = resource_type
        self.assert_not_null(operation, "operation")
        self.operation = operation
        self.assert_not_null(uri, "uri")
        self.uri = uri
        self.assert_not_null(organization, "organization")
        self.organization = organization

        self.uuid = uuid.uuid4()
        self.date = datetime.now()

        self.message_properties = message_properties or {}

    def to_xml(self):
        root = etree.Element("event")

        etree.SubElement(root, "service").text = self.service
        etree.SubElement(root, "user").text = self.user
        etree.SubElement(root, "machine").text = self.machine
        etree.SubElement(root, "resourceType").text = self.resource_type
        etree.SubElement(root, "operation").text = self.operation
        etree.SubElement(root, "uri").text = self.uri
        etree.SubElement(root, "organization").text = self.organization
        etree.SubElement(root, "id").text = self.uuid.hex
        etree.SubElement(root, "timestamp").text = self.date.isoformat()

        if self.message_properties:
            message_element = etree.SubElement(root, "otherProperties")
            for key, value in self.message_properties.items():
                entry_element = etree.SubElement(message_element, "entry")
                etree.SubElement(entry_element, "string").text = key
                etree.SubElement(entry_element, "string").text = value

        return etree.tostring(root, pretty_print=True, xml_declaration=True, encoding='utf-8')
